import React from "react";
import {
  Navbar,
  Collapse,
  Typography,
  Button,
  IconButton,
  List,
  ListItem,
  Menu,
  MenuHandler,
  MenuList,
  MenuItem,
} from "@material-tailwind/react";
import {
  ChevronDownIcon,
  Bars3Icon,
  XMarkIcon,
} from "@heroicons/react/24/outline";

// Define items with headings
const crafts = [
  { heading: "Functional", items: [
     { title: "Planters" },
     { title: "Ceramics & Pottery" },
     { title: "Basketry" },
     { title: "Truck Art" },
     { title: "Rilli" },
    ] },
  { heading: "Decorative", items: [
    { title: "Camel Skin" },
    { title: "Lacquer Art" },
    { title: "Wood Craft" },
    { title: "Metal Craft" },
    { title: "Onyx Craft" },
] },
  { heading: "Fashion", items: [
    { title: "Ajrak" },
     { title: "Khussa" },
     { title: "Pashmina" },
     { title: "Bone Carving" },
    ] },
];

const decor = [
    { heading: "Home Decor", items: [
        { title: "Planters" },
        { title: "Boxes & Jars" },
        { title: "Lamps" },
        { title: "Vases & Holders" },
        { title: "Pottery & Tableware" },
        { title: "Trays & Baskets" },
       ] },
     { heading: "Furnishing", items: [
       { title: "Doors & Wall Hangings" },
       { title: "Paintings" },
       { title: "Sculptures" },
       { title: "Furniture" },
       { title: "Rugs & Carpets" },
   ] },
     { heading: "Home Textile", items: [
       { title: "Cushions" },
        { title: "Bed Covers" },
        { title: "Blankets & Khess" },
        { title: "Tissue Box Covers" },
       ] },
]; // Customize decor items as needed
const apparel = [
    { heading: "Women Clothing", items: [
        { title: "Scarfs & Shawls" },
        { title: "Unstitched Fabric" },
        { title: "Pret, Shirts & Kurta" },
        { title: "Hats & Caps" },
        { title: "Coats & Uppers" },
       ] },
     { heading: "Men Clothing", items: [
       { title: "Scarfs & Shawls" },
       { title: "Shirts & Kurta" },
       { title: "Unstitched Fabric" },
       { title: "Hats & Caps" },
       { title: "Coats & Uppers" },
   ] },
     { heading: "Kids Clothing", items: [
       { title: "Dresses" },
        { title: "Kurta & Shirts" },
        { title: "Hats & Caps" },
        { title: "Sweaters, Coats & Uppers" },
       ] },
]; // Customize apparel items as needed
const footwear = [...decor]
const accessories = [...decor]
const gifts = [...decor]

function renderMenuItems(categories) {
  return categories.map(({ heading, items }, key) => (
    <div key={key} className="mb-6 w-72"> {/* Increased width and space between items */}
      <Typography variant="h6" color="orange" className="text-orange-500 font-bold ml-4 mb-4">
        {heading}
      </Typography>
      {items.map(({ title }, index) => (
        <a href="#" key={index}>
          <MenuItem className="flex items-center gap-4 mb-4 border-t rounded-none border-gray-300 pt-2 hover:border-orange-500 transition-colors duration-400 hover:bg-white"> {/* Border added above each item */}
            <Typography variant="small" color="blue-gray" className="text-sm font-bold">
              {title}
            </Typography>
          </MenuItem>
        </a>
      ))}
    </div>
  ));
}

function NavListMenu({ title, items }) {
  const [isMenuOpen, setIsMenuOpen] = React.useState(false);
  return (
    <Menu
      open={isMenuOpen}
      handler={setIsMenuOpen}
      offset={{ mainAxis: 20 }}
      placement="bottom"
      allowHover={true}
    >
      <MenuHandler>
        <Typography as="div"  className="text-lg">
          <ListItem
            className="flex items-center gap-2 py-2 pr-4  text-gray-900 border-r-2 rounded-none border-gray-400 hover:bg-white "
            selected={isMenuOpen}
            onClick={() => setIsMenuOpen((cur) => !cur)}
          >
            {title}
            <ChevronDownIcon
              strokeWidth={2.5}
              className={`h-3 w-3 transition-transform ${isMenuOpen ? "rotate-180" : ""}`}
            />
          </ListItem>
        </Typography>
      </MenuHandler>
      <MenuList className="hidden max-w-screen-xl lg:block">
        <ul className="grid grid-cols-3 gap-y-4 gap-x-10 outline-none outline-0"> {/* Added more gap-y */}
          {renderMenuItems(items)}
        </ul>
      </MenuList>
    </Menu>
  );
}

function NavList() {
  return (
    <List className="mt-4 mb-6 p-0 lg:mt-0 lg:mb-0 lg:flex-row lg:p-1">
      <Typography as="a" href="#"  color="blue-gray" className="text-lg">
        <ListItem className="flex items-center gap-2 py-2 pr-4">Home</ListItem>
      </Typography>
      <NavListMenu title="Crafts" items={crafts} />
      <NavListMenu title="Decor" items={decor} />
      <NavListMenu title="Apparel" items={apparel} />
      <NavListMenu title="Footwear" items={footwear} />
      <NavListMenu title="Accessories" items={accessories} />
      <NavListMenu title="Gifts" items={gifts} />
      <Typography as="a" href="#"  color="blue-gray" className="text-lg">
        <ListItem className="flex items-center gap-2 py-2 pr-4">Craft Map</ListItem>
      </Typography>
    </List>
  );
}

export function NavbarWithMegaMenu() {
  const [openNav, setOpenNav] = React.useState(false);

  React.useEffect(() => {
    window.addEventListener("resize", () => window.innerWidth >= 960 && setOpenNav(false));
  }, []);

  return (
    <Navbar className="mx-auto max-w-screen-2xl px-4 py-2">
      <div className="flex items-center justify-center text-blue-gray-900">
        <div className="hidden lg:block">
          <NavList />
        </div>
        <IconButton
          variant="text"
          color="blue-gray"
          className="lg:hidden"
          onClick={() => setOpenNav(!openNav)}
        >
          {openNav ? (
            <XMarkIcon className="h-6 w-6" strokeWidth={2} />
          ) : (
            <Bars3Icon className="h-6 w-6" strokeWidth={2} />
          )}
        </IconButton>
      </div>
      <Collapse open={openNav}>
        <NavList />
      </Collapse>
    </Navbar>
  );
}


Admin Pannel---------------------

import React, { useState } from "react";
import { FaHome, FaUsers, FaShoppingBag, FaCog } from "react-icons/fa";
import { MdArchive } from "react-icons/md";
import { FaBars, FaTimes } from "react-icons/fa";
import AddProduct from "./AddProduct";


const sidebarItems = [
    { label: "Dashboard", icon: FaHome, component: <div>Dashboard</div> },
    { label: "User Management", icon: FaUsers, component: null },
    { label: "Product Management", icon: MdArchive, component: null },
    { label: "Order Management", icon: FaShoppingBag, component: null },
    { label: "Settings", icon: FaCog, component: null },
  ];
  
  const productManagementItems = [
    { label: "Add Product", component: <AddProduct/> },
    { label: "Manage Products", component: <div>Dashboard</div> },
    { label: "All Products", component: <div>Dashboard</div> },
  ];
  
  const userManagementItems = [
    {
      label: "All Users",
      component: (
        <div>
          <div>Dashboard</div>
        </div>
      ),
    },
    {
      label: "Most Active Users",
      component: (
        <div>
          <div>Dashboard</div>
        </div>
      ),
    },
    {
      label: "Delete Users",
      component: (
        <div>
          <div>Dashboard</div>
        </div>
      ),
    },
  ];
  
  const orderManagementItems = [
    { label: "View Orders", component: <div>View Orders Component</div> },
    {
      label: "Update Order Status",
      component: <div>Update Order Status Component</div>,
    },
    { label: "Cancel Orders", component: <div>Cancel Orders Component</div> },
    { label: "All Orders", component: <div>All Orders Component</div> },
  ];
  
  const settingsItems = [
    {
      label: "Profile Settings",
      component: <div>Profile Settings Component</div>,
    },
    { label: "System Settings", component: <div>System Settings Component</div> },
    {
      label: "Security Settings",
      component: <div>Security Settings Component</div>,
    },
  ];

const AdminPanel = () => {
    const [activeComponent, setActiveComponent] = useState(
        sidebarItems[0].component
      );
      const [sidebarOpen, setSidebarOpen] = useState(false);
      const [isProductDropdownOpen, setIsProductDropdownOpen] = useState(false);
      const [isUserDropdownOpen, setIsUserDropdownOpen] = useState(false);
      const [isOrderDropdownOpen, setIsOrderDropdownOpen] = useState(false);
      const [isSettingsDropdownOpen, setIsSettingsDropdownOpen] = useState(false);

      const handleDropdownItemClick = (component) => {
        setActiveComponent(component);
        setIsProductDropdownOpen(false);
        setIsUserDropdownOpen(false);
        setIsOrderDropdownOpen(false);
        setIsSettingsDropdownOpen(false);
      };
  return (
    <div className="flex h-screen overflow-hidden bg-gray-100">
      <aside
        className={`fixed inset-y-0 left-0 w-64 bg-white shadow-2xl z-40 transform ${
          sidebarOpen ? "translate-x-0" : "-translate-x-full"
        } transition-transform duration-300 ease-in-out md:relative md:w-64 md:translate-x-0 lg:w-72 xl:w-80`}
      >
        <div className="flex flex-col h-full">
          <div className="flex-shrink-0 px-6 py-4 bg-orange-900 text-white relative">
            <h1 className="text-xl font-bold">Admin Panel</h1>
            <button
              className="md:hidden absolute top-4 right-4 p-2 text-white"
              onClick={() => setSidebarOpen(!sidebarOpen)}
            >
              {sidebarOpen ? (
                <FaTimes className="h-6 w-6" />
              ) : (
                <FaBars className="h-6 w-6" />
              )}
            </button>
          </div>
          <nav className="flex-1 px-2 py-4 overflow-y-auto scrollbar-hidden scroll-smooth bg-orange-800 ">
            <ul className="space-y-2">
              {sidebarItems.map(({ label, icon: Icon, component }, index) => (
                <li key={index} className="relative group">
                  {label === "Product Management" ? (
                    <>
                      <button
                        className={`flex items-center w-full px-4 py-2 text-left text-white hover:bg-gray-600 rounded-md transition duration-300 ease-in-out transform hover:scale-105 text-sm md:text-base lg:text-lg ${
                          isProductDropdownOpen ? "bg-gray-700" : ""
                        }`}
                        onClick={() =>
                          setIsProductDropdownOpen(!isProductDropdownOpen)
                        }
                      >
                        <Icon className="h-6 w-6 mr-3" />
                        {label}
                      </button>
                      <ul
                        className={`ml-8 mt-2 space-y-2 transition-all duration-300 ease-in-out ${
                          isProductDropdownOpen
                            ? "max-h-40 opacity-100 mb-3"
                            : "max-h-0 opacity-0 overflow-hidden"
                        }`}
                      >
                        {productManagementItems.map((item, subIndex) => (
                          <li key={subIndex}>
                            <button
                              className="flex items-center w-full px-4 py-2 text-left text-white hover:bg-gray-600 rounded-md transition duration-300 ease-in-out transform hover:scale-105 bg-gray-900"
                              onClick={() =>
                                handleDropdownItemClick(item.component)
                              }
                            >
                              {item.label}
                            </button>
                          </li>
                        ))}
                      </ul>
                    </>
                  ) : label === "Dashboard" ? (
                    <button
                      className={`flex items-center w-full px-4 py-2 text-left text-white rounded-md transition duration-300 ease-in-out transform hover:scale-105 text-sm md:text-base lg:text-lg `}
                      onClick={() => setActiveComponent(component)}
                    >
                      <Icon className="h-6 w-6 mr-3" />
                      {label}
                    </button>
                  ) : label === "User Management" ? (
                    <>
                      <button
                        className={`flex items-center w-full px-4 py-2 text-left text-white rounded-md transition duration-300 ease-in-out transform hover:scale-105 text-sm md:text-base lg:text-lg   ${
                          isUserDropdownOpen ? "bg-gray-700" : ""
                        }`}
                        onClick={() =>
                          setIsUserDropdownOpen(!isUserDropdownOpen)
                        }
                      >
                        <Icon className="h-6 w-6 mr-3" />
                        {label}
                      </button>
                      <ul
                        className={`ml-8 mt-2 space-y-2 transition-all duration-300 ease-in-out ${
                          isUserDropdownOpen
                            ? "max-h-40 opacity-100 mb-3"
                            : "max-h-0 opacity-0 overflow-hidden"
                        }`}
                      >
                        {userManagementItems.map((item, subIndex) => (
                          <li key={subIndex}>
                            <button
                              className="flex items-center w-full px-4 py-2 text-left text-white hover:bg-gray-600 rounded-md transition duration-300 ease-in-out transform hover:scale-105 bg-gray-900"
                              onClick={() =>
                                handleDropdownItemClick(item.component)
                              }
                            >
                              {item.label}
                            </button>
                          </li>
                        ))}
                      </ul>
                    </>
                  ) : label === "Order Management" ? (
                    <>
                      <button
                        className={`flex items-center w-full px-4 py-2 text-left text-white rounded-md transition duration-300 ease-in-out transform hover:scale-105 text-sm md:text-base lg:text-lg   ${
                          isOrderDropdownOpen ? "bg-gray-700" : ""
                        }`}
                        onClick={() =>
                          setIsOrderDropdownOpen(!isOrderDropdownOpen)
                        }
                      >
                        <Icon className="h-6 w-6 mr-3" />
                        {label}
                      </button>
                      <ul
                        className={`ml-8 mt-2 space-y-2 transition-all duration-300 ease-in-out ${
                          isOrderDropdownOpen
                            ? "max-h-40 opacity-100 mb-8"
                            : "max-h-0 opacity-0 overflow-hidden"
                        }`}
                      >
                        {orderManagementItems.map((item, subIndex) => (
                          <li key={subIndex}>
                            <button
                              className="flex items-center w-full px-4 py-2 text-left text-white hover:bg-gray-600 rounded-md transition duration-300 ease-in-out transform hover:scale-105 bg-gray-900"
                              onClick={() =>
                                handleDropdownItemClick(item.component)
                              }
                            >
                              {item.label}
                            </button>
                          </li>
                        ))}
                      </ul>
                    </>
                  ) : label === "Settings" ? (
                    <>
                      <button
                        className={`flex items-center w-full px-4 py-2 text-left text-white rounded-md transition duration-300 ease-in-out transform hover:scale-105 text-sm md:text-base lg:text-lg   ${
                          isSettingsDropdownOpen ? "bg-gray-700" : ""
                        }`}
                        onClick={() =>
                          setIsSettingsDropdownOpen(!isSettingsDropdownOpen)
                        }
                      >
                        <Icon className="h-6 w-6 mr-3" />
                        {label}
                      </button>
                      <ul
                        className={`ml-8 mt-2 space-y-2 transition-all duration-300 ease-in-out ${
                          isSettingsDropdownOpen
                            ? "max-h-40 opacity-100 mb-5"
                            : "max-h-0 opacity-0 overflow-hidden"
                        }`}
                      >
                        {settingsItems.map((item, subIndex) => (
                          <li key={subIndex}>
                            <button
                              className="flex items-center w-full px-4 py-2 text-left text-white hover:bg-gray-600 rounded-md transition duration-300 ease-in-out transform hover:scale-105 bg-gray-900"
                              onClick={() =>
                                handleDropdownItemClick(item.component)
                              }
                            >
                              {item.label}
                            </button>
                          </li>
                        ))}
                      </ul>
                    </>
                  ) : (
                    <button
                      className={`flex items-center w-full px-4 py-2 text-left text-white hover:bg-gray-800 rounded-md transition duration-300 ease-in-out transform hover:scale-105 ${
                        activeComponent === component ? "bg-gray-900" : ""
                      }`}
                      onClick={() => setActiveComponent(component)}
                    >
                      <Icon className="h-6 w-6 mr-3" />
                      {label}
                    </button>
                  )}
                </li>
              ))}
            </ul>
          </nav>
        </div>
      </aside>

      <main
        className={`flex-1 p-6 overflow-y-auto transition-transform duration-300 ease-in-out ${sidebarOpen ? "ml-64" : "ml-10"}`}
      >
        <button
          className="md:hidden fixed top-4 left-4 p-2 text-gray-800 bg-white rounded-md shadow-md"
          onClick={() => setSidebarOpen(true)}
        >
          <FaBars className="h-6 w-6" />
        </button>
        {activeComponent}
      </main>
    </div>
  )
}

export default AdminPanel


==--==--==--++**///
New Admin Pannel:
import React, { useState, useEffect } from "react";
import { FaHome, FaUsers, FaShoppingBag, FaArrowLeft, FaPlus, FaList } from "react-icons/fa";
import { RiUserStarFill } from "react-icons/ri";
import { TiUserDelete } from "react-icons/ti";
import { VscMultipleWindows } from "react-icons/vsc";
import { MdArchive, MdPreview, MdCancel } from "react-icons/md";
import { GrDocumentUpdate } from "react-icons/gr";
import { FaSun, FaMoon } from "react-icons/fa";
import AddProduct from "./AddProduct";
import axios from "axios";
import UserList from "../components/UserList";
import MostActiveUsers from "../components/MostActiveUsers";
import UserDeleteList from "../components/UserDeleteList";
import AllProducts from "../components/AllProducts";
import { BsCloudMoonFill } from "react-icons/bs";
import Dashboard from "../components/AdminDashboard";
import MyProducts from "../components/MyProducts";
import ManageProducts from "../components/ManageProducts";

const sidebarItems = [
  { label: "Dashboard", icon: FaHome, component: <Dashboard/> },
  { label: "User Management", icon: FaUsers, component: null },
  { label: "Product Management", icon: MdArchive, component: null },
  { label: "Order Management", icon: FaShoppingBag, component: null },
];

const productManagementItems = [
  { label: "Add Product", icon: FaPlus, component: <AddProduct /> },
  { label: "Manage Products", icon: FaList, component: <ManageProducts/> },
  { label: "All Products", icon: VscMultipleWindows, component: <MyProducts/> },
];

const userManagementItems = [
  { label: "All Users", icon: FaUsers, component: <UserList/> },
  { label: "Most Active Users", icon: RiUserStarFill, component: <MostActiveUsers/> },
  { label: "Delete Users", icon: TiUserDelete, component: <UserDeleteList/> },
];

const orderManagementItems = [
  { label: "View Orders", icon: MdPreview, component: <div>View Orders</div> },
  { label: "Update Order Status", icon: GrDocumentUpdate, component: <div>Update Order Status</div> },
  { label: "Cancel Orders", icon: MdCancel, component: <div>Cancel Orders</div> },
];

const Header = () => {
    const [time, setTime] = useState("");
    const [greeting, setGreeting] = useState("");
    const [icon, setIcon] = useState(<FaSun />); // Default to morning icon
    const [iconColor, setIconColor] = useState("text-yellow-500"); // Default to yellow for morning/afternoon
    const [firstName, setFirstName] = useState(""); // State for user's first name
  
    useEffect(() => {
      const updateTime = () => {
        const options = { timeZone: "Asia/Karachi", hour: "2-digit", minute: "2-digit", second: "2-digit" };
        const currentTime = new Date().toLocaleTimeString("en-US", options);
        setTime(currentTime);
  
        const currentHour = new Date().getHours();
  
        // Determine greeting, icon, and icon color based on time
        if (currentHour >= 6 && currentHour < 12) {
          setGreeting("Good Morning");
          setIcon(<FaSun />);
          setIconColor("text-orange-800"); // Yellow for morning
        } else if (currentHour >= 12 && currentHour < 18) {
          setGreeting("Good Afternoon");
          setIcon(<FaSun />);
          setIconColor("text-yellow-800"); // Yellow for afternoon
        } else {
          setGreeting("Good Evening");
          setIcon(<BsCloudMoonFill />);
          setIconColor("text-blue-800"); // Blue for evening
        }
      };
  
      updateTime(); // Initial time set
      const interval = setInterval(updateTime, 1000); // Update every second
  
      return () => clearInterval(interval); // Cleanup interval on component unmount
    }, []);
  
    // Fetch the user's first name from the backend
    useEffect(() => {
      const fetchUserFirstName = async () => {
        try {
          const response = await axios.get("/api/users/getUserFirstName"); // Fetch the first name from the backend
          setFirstName(response.data.data); // Set the fetched first name
        } catch (error) {
          console.error("Error fetching user first name", error);
        }
      };
  
      fetchUserFirstName(); // Fetch first name when component mounts
    }, []);
  
    return (
      <div className="bg-orange-900 text-white py-2 flex justify-center items-center space-x-2 h-16">
        <span className="text-lg font-semibold flex items-center">
          <span className={`text-3xl ${iconColor}`}>{icon}</span> {/* Apply dynamic color here */}
          <span className="ml-2">{greeting}, Dear {firstName || "Admin"} - {time}</span>
        </span>
      </div>
    );
  };

const AdminPanel = () => {
  const [activeComponent, setActiveComponent] = useState(sidebarItems[0].component);
  const [compactSidebar, setCompactSidebar] = useState(false);
  const [dropdownStates, setDropdownStates] = useState({
    Product: false,
    User: false,
    Order: false,
  });

  const handleDropdownToggle = (key) => {
    setDropdownStates((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const renderSidebarItems = (label, items, key, IconComponent) => (
    <>
      <button
        className={`flex items-center w-full px-4 py-2 text-left text-white rounded-md transition-all duration-200 text-lg hover:bg-orange-700 ${dropdownStates[key] ? "bg-orange-700" : ""}`}
        onClick={() => handleDropdownToggle(key)}
      >
        <span className="mr-3 text-3xl">
          <IconComponent /> {/* Render the icon component */}
        </span>
        {/* Conditionally hide the text when compactSidebar is true */}
        {!compactSidebar && label}
      </button>
      <div
        className={`overflow-hidden transition-all duration-300 ease-in-out ${dropdownStates[key] ? "max-h-screen" : "max-h-0"}`}
      >
        <ul className="ml-4 space-y-1">
          {items.map((item, idx) => (
            <li key={idx}>
              <button
                className="flex items-center gap-x-2 w-full px-4 py-2 text-left text-white bg-orange-800 rounded-md transition-all duration-200 hover:bg-orange-600"
                onClick={() => setActiveComponent(item.component)}
              >
                <span className="text-xl">
                  <item.icon /> {/* Render the icon component for each submenu item */}
                </span>
                {/* Conditionally hide the text when compactSidebar is true */}
                {!compactSidebar && item.label}
              </button>
            </li>
          ))}
        </ul>
      </div>
    </>
  );
  

  return (
    <div className="flex flex-col h-screen bg-gray-100">
      {/* Header */}
      <Header />

      {/* Main Content */}
      <div className="flex flex-1">
        {/* Sidebar */}
        <aside className={`bg-orange-900 text-white transition-all duration-300 ${compactSidebar ? "w-24" : "w-80"}`}>
          <div className="flex items-center justify-between px-4 py-4 border-b border-orange-700">
            {!compactSidebar && <h1 className="text-3xl font-bold">Admin Panel</h1>}
            <button onClick={() => setCompactSidebar(!compactSidebar)}>
              <FaArrowLeft className={`w-6 h-6 transform transition-transform ${compactSidebar ? "rotate-180" : ""}`} />
            </button>
          </div>
          <nav className="p-4 space-y-2">
          <button
              className="flex items-center px-4 py-2 text-left text-white rounded-md transition-all duration-200 text-xl hover:bg-orange-700"
              onClick={() => setActiveComponent(sidebarItems[0].component)}
            >
              <FaHome className="mr-3 text-3xl" />
              {/* Conditionally hide the text when compactSidebar is true */}
              {!compactSidebar && "Dashboard"}
            </button>
            {renderSidebarItems("User Management", userManagementItems, "User", FaUsers)}
            {renderSidebarItems("Product Management", productManagementItems, "Product", MdArchive)}
            {renderSidebarItems("Order Management", orderManagementItems, "Order", FaShoppingBag)}
            
          </nav>
        </aside>

        {/* Main Panel */}
        <main className="flex-1 p-6 overflow-auto">{activeComponent}</main>
      </div>
    </div>
  );
};

export default AdminPanel;

{/* Image Gallery */}
      <div className="py-12 px-4 md:px-12 bg-gray-100">
        <h2 className="text-3xl font-bold text-center text-gray-800 mb-8">
          Explore Our Handcrafted Collections
        </h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {/* Ceramic Art */}
          <div className="overflow-hidden rounded-lg shadow-lg">
            <img
              src="https://images.pexels.com/photos/6909856/pexels-photo-6909856.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
              alt="Ceramic Art"
              className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
            />
            <div className="p-4">
              <h3 className="text-lg font-semibold">Ceramic Art</h3>
              <p className="text-gray-600 mt-2">
                Beautifully crafted ceramics for your home and decor needs.
              </p>
            </div>
          </div>

          {/* Handwoven Textiles */}
          <div className="overflow-hidden rounded-lg shadow-lg">
            <img
              src="https://images.pexels.com/photos/6634278/pexels-photo-6634278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
              alt="Handwoven Textiles"
              className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
            />
            <div className="p-4">
              <h3 className="text-lg font-semibold">Handwoven Textiles</h3>
              <p className="text-gray-600 mt-2">
                Discover traditional patterns and vibrant colors in our
                textiles.
              </p>
            </div>
          </div>

          {/* Artisan Jewelry */}
          <div className="overflow-hidden rounded-lg shadow-lg">
            <img
              src="https://images.pexels.com/photos/10474333/pexels-photo-10474333.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
              alt="Artisan Jewelry"
              className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
            />
            <div className="p-4">
              <h3 className="text-lg font-semibold">Artisan Jewelry</h3>
              <p className="text-gray-600 mt-2">
                Unique, handcrafted jewelry that tells a story.
              </p>
            </div>
          </div>

          {/* Basketry */}
          <div className="overflow-hidden rounded-lg shadow-lg">
            <img
              src="https://images.pexels.com/photos/7575077/pexels-photo-7575077.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
              alt="Basketry"
              className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
            />
            <div className="p-4">
              <h3 className="text-lg font-semibold">Basketry</h3>
              <p className="text-gray-600 mt-2">
                Handwoven baskets with intricate designs and durability.
              </p>
            </div>
          </div>

          {/* Boxes & Jars */}
          <div className="overflow-hidden rounded-lg shadow-lg">
            <img
              src="https://images.pexels.com/photos/6334660/pexels-photo-6334660.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
              alt="Boxes & Jars"
              className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
            />
            <div className="p-4">
              <h3 className="text-lg font-semibold">Boxes</h3>
              <p className="text-gray-600 mt-2">
                Decorative and functional storage solutions for every space.
              </p>
            </div>
          </div>

          {/* Bangles */}
          <div className="overflow-hidden rounded-lg shadow-lg">
            <img
              src="https://images.pexels.com/photos/9808451/pexels-photo-9808451.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
              alt="Bangles"
              className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
            />
            <div className="p-4">
              <h3 className="text-lg font-semibold">Bangles</h3>
              <p className="text-gray-600 mt-2">
                Elegant handcrafted bangles to complement your style.
              </p>
            </div>
          </div>

          {/* Necklaces */}
          <div className="overflow-hidden rounded-lg shadow-lg">
            <img
              src="https://images.pexels.com/photos/10491415/pexels-photo-10491415.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
              alt="Necklaces"
              className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
            />
            <div className="p-4">
              <h3 className="text-lg font-semibold">Necklaces</h3>
              <p className="text-gray-600 mt-2">
                Exquisite necklaces crafted with precision and care.
              </p>
            </div>
          </div>

          {/* Hats & Caps */}
          <div className="overflow-hidden rounded-lg shadow-lg">
            <img
              src="https://images.pexels.com/photos/8201150/pexels-photo-8201150.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
              alt="Hats & Caps"
              className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
            />
            <div className="p-4">
              <h3 className="text-lg font-semibold">Hats & Caps</h3>
              <p className="text-gray-600 mt-2">
                Stylish hats and caps for all seasons.
              </p>
            </div>
          </div>
        </div>
      </div>


Header:
import React from "react";
import {
  Navbar,
  Collapse,
  Typography,
  IconButton,
  List,
  ListItem,
  Menu,
  MenuHandler,
  MenuList,
  MenuItem,
} from "@material-tailwind/react";
import {
  ChevronDownIcon,
  Bars3Icon,
  XMarkIcon,
} from "@heroicons/react/24/outline";
import { useNavigate } from "react-router-dom";

// Define items with headings
const crafts = [
  {
    heading: "Functional",
    items: [{ title: "Ceramics & Pottery" }, { title: "Basketry" }],
  },
  {
    heading: "Decorative",
    items: [{ title: "Camel Skin" }, { title: "Wood Craft" }],
  },
  { heading: "Fashion", items: [{ title: "Ajrak" }, { title: "Khussa" }] },
];

const decor = [
  {
    heading: "Home Decor",
    items: [{ title: "Boxes & Jars" }, { title: "Lamps" }],
  },
  {
    heading: "Furnishing",
    items: [
      { title: "Paintings" },
      { title: "Furniture" },
      { title: "Rugs & Carpets" },
    ],
  },
  {
    heading: "Home Textile",
    items: [{ title: "Cushions" }, { title: "Tissue Box Covers" }],
  },
]; // Customize decor items as needed
const apparel = [
  {
    heading: "Clothing",
    items: [
      { title: "Scarfs & Shawls" },
      { title: "Unstitched Fabric" },
      { title: "Hats & Caps" },
      { title: "Sweaters, Coats & Uppers" },
    ],
  },
];
const accessories = [
  { heading: "Bags & Purses", items: [{ title: "Clutches & Wristlets" }] },
  { heading: "Jewelry", items: [{ title: "Bangles" }, { title: "Necklaces" }] },
  { heading: "Miscellaneous", items: [{ title: "Gloves & Mitts" }] },
];

function renderMenuItems(categories) {
  return categories.map(({ heading, items }, key) => (
    <div key={key} className="w-auto">
      <h2 className="text-orange-500 font-bold ml-4 mb-4">{heading}</h2>
      {items.map(({ title }, index) => (
        <MenuItem
          key={index}
          className="flex items-center gap-4 mb-4 border-t pt-2 hover:border-orange-500 hover:bg-white transition-colors duration-400"
        >
          <p className="text-sm font-bold">{title}</p>
        </MenuItem>
      ))}
    </div>
  ));
}

function NavListMenu({ title, items, isMobile, handleCraftClick }) {
  const [isMenuOpen, setIsMenuOpen] = React.useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = React.useState(false);

  return (
    <div
      className="relative"
      onMouseEnter={() => setIsMenuOpen(true)}
      onMouseLeave={() => setIsMenuOpen(false)}
    >
      {/* For Desktop: Hover to show the dropdown */}
      {!isMobile && (
        <Menu
          open={isMenuOpen}
          handler={setIsMenuOpen}
          offset={{ mainAxis: 20 }}
          placement="bottom"
          allowHover={true}
        >
          <MenuHandler>
            <Typography as="div" className="text-sm">
              <ListItem
                className="flex items-center gap-2 py-2 pr-4 text-gray-900 border-r-2 rounded-none border-gray-400 hover:bg-white"
                onClick={handleCraftClick}
              >
                {title}
                <ChevronDownIcon
                  strokeWidth={2.5}
                  className={`h-3 w-3 transition-transform ${
                    isMenuOpen ? "rotate-180" : ""
                  }`}
                />
              </ListItem>
            </Typography>
          </MenuHandler>
          <MenuList
            className={`px-4 py-2 bg-white shadow-lg border rounded-lg ${
              items.length === 1 ? "w-80" : "w-[50rem]"
            }`}
          >
            <ul
              className={`grid gap-y-4 gap-x-10 outline-none ${
                items.length === 1 ? "grid-cols-1" : "grid-cols-3"
              }`}
            >
              {renderMenuItems(items)}
            </ul>
          </MenuList>
        </Menu>
      )}

      {/* For Mobile: Click to toggle dropdown */}
      {isMobile && (
        <div className="block lg:hidden">
          <ListItem
            className="flex items-center gap-2 py-2 pr-4 text-gray-900 hover:bg-white"
            onClick={() => setIsMobileMenuOpen((prev) => !prev)}
          >
            {title}
            <ChevronDownIcon
              strokeWidth={2.5}
              className={`h-3 w-3 transition-transform ${
                isMobileMenuOpen ? "rotate-180" : ""
              }`}
            />
          </ListItem>
          <Collapse open={isMobileMenuOpen}>
            <div className="grid grid-cols-1 gap-4">
              {renderMenuItems(items)}
            </div>
          </Collapse>
        </div>
      )}
    </div>
  );
}

function NavList() {
  const navigate = useNavigate();

  const handleCraftClick = () => {
    navigate("/craftMap");
  };
  const handleHomeClick = () => {
    navigate("/");
  };
  const isMobile = window.innerWidth < 960;

  return (
    <List className="mt-4 mb-6 p-0 lg:mt-0 lg:mb-0 lg:flex-row lg:p-1">
      <Typography
        as="a"
        onClick={handleHomeClick}
        href="#"
        color="blue-gray"
        className="text-sm"
      >
        <ListItem className="flex items-center gap-2 py-2 pr-4">Home</ListItem>
      </Typography>
      <NavListMenu title="Crafts" items={crafts} isMobile={isMobile} />
      <NavListMenu title="Decor" items={decor} isMobile={isMobile} />
      <NavListMenu title="Apparel" items={apparel} isMobile={isMobile} />
      <NavListMenu
        title="Accessories"
        items={accessories}
        isMobile={isMobile}
      />
      <Typography
        as="a"
        onClick={handleCraftClick}
        className="text-sm cursor-pointer"
      >
        <ListItem className="flex items-center gap-2 py-2 pr-4">
          Craft Map
        </ListItem>
      </Typography>
    </List>
  );
}

export function NavbarWithMegaMenu() {
  const [openNav, setOpenNav] = React.useState(false);
  const isMobile = window.innerWidth < 960;

  React.useEffect(() => {
    window.addEventListener(
      "resize",
      () => window.innerWidth >= 960 && setOpenNav(false)
    );
  }, []);

  return (
    <Navbar className="mx-auto max-w-full px-4 py-2">
      <div className="flex items-center justify-center text-blue-gray-900">
        <div className="hidden lg:block">
          <NavList />
        </div>
        {/* Toggle mobile menu */}
        <IconButton
          variant="text"
          color="blue-gray"
          className="lg:hidden"
          onClick={() => setOpenNav(!openNav)}
        >
          {openNav ? (
            <XMarkIcon className="h-6 w-6" strokeWidth={2} />
          ) : (
            <Bars3Icon className="h-6 w-6" strokeWidth={2} />
          )}
        </IconButton>
      </div>
      <Collapse open={openNav}>
        <div className="block lg:hidden">
          <NavList />
        </div>
      </Collapse>
    </Navbar>
  );
}

manageprdt:
import React, { useEffect, useState } from "react";
import axios from "axios";

const ManageProducts = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [currentProduct, setCurrentProduct] = useState({});
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    price: "",
    category: "",
    subcategory: "",
    stock: "",
    deliveryTime: "",
    specifications: "",
  });

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        const { data } = await axios.get("/api/products/myProducts", {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        setProducts(data.data);
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch products");
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  const handleUpdateClick = (product) => {
    setCurrentProduct(product);
    setFormData(product); // Pre-fill the form with existing product details
    setShowModal(true);
  };

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.put(
        `/api/products/updateProduct/${currentProduct._id}`,
        formData,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );
      setProducts(
        products.map((p) =>
          p._id === currentProduct._id ? { ...p, ...formData } : p
        )
      );
      setShowModal(false);
    } catch (err) {
      alert(err.response?.data?.message || "Failed to update product");
    }
  };

  const handleDeleteClick = async (productId) => {
    if (window.confirm("Are you sure you want to delete this product?")) {
      try {
        await axios.delete(`/api/products/deleteProduct/${productId}`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        setProducts(products.filter((product) => product._id !== productId));
      } catch (err) {
        alert(err.response?.data?.message || "Failed to delete product");
      }
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6">
      <h1 className="text-3xl font-bold text-center mb-8">Manage Products</h1>

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-3 gap-8">
        {products.map((product) => (
         <div
         key={product._id}
         className="w-full lg:w-[95%] xl:w-[90%] bg-white shadow-lg rounded-lg overflow-hidden transform transition-all hover:scale-105 hover:shadow-2xl duration-300 mx-auto"
       >
         <div className="relative">
           <img
             src={product.images[0] || "/placeholder-image.jpg"}
             alt={product.name}
             className="w-full h-56 object-cover rounded-t-lg"
           />
         </div>
         <div className="p-6">
           <h3 className="text-xl font-semibold text-gray-800 mb-2 truncate">
             {product.name.toUpperCase()}
           </h3>
           <p className="text-lg text-gray-900 font-semibold mb-2">Rs {product.price}</p>
           <p className="text-sm text-gray-500 mb-4">Stock: {product.stock}</p>
       
           <div className="flex justify-between gap-4">
             <button
               onClick={() => handleUpdateClick(product)}
               className="bg-blue-500 text-white px-4 py-2 rounded-md transition-colors duration-300 hover:bg-blue-600"
             >
               Update
             </button>
             <button
               onClick={() => handleDeleteClick(product._id)}
               className="bg-red-500 text-white px-4 py-2 rounded-md transition-colors duration-300 hover:bg-red-600"
             >
               Delete
             </button>
           </div>
         </div>
       </div>
       
        ))}
      </div>

      {showModal && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg w-1/2">
            <h2 className="text-2xl font-bold mb-4">Update Product</h2>
            <form onSubmit={handleSubmit}>
              <input
                type="text"
                name="name"
                placeholder="Product Name"
                value={formData.name}
                onChange={handleInputChange}
                className="w-full border p-2 mb-4"
              />
              <textarea
                name="description"
                placeholder="Description"
                value={formData.description}
                onChange={handleInputChange}
                className="w-full border p-2 mb-4"
              />
              <input
                type="number"
                name="price"
                placeholder="Price"
                value={formData.price}
                onChange={handleInputChange}
                className="w-full border p-2 mb-4"
              />
              <input
                type="text"
                name="category"
                placeholder="Category"
                value={formData.category}
                onChange={handleInputChange}
                className="w-full border p-2 mb-4"
              />
              <input
                type="text"
                name="subcategory"
                placeholder="Subcategory"
                value={formData.subcategory}
                onChange={handleInputChange}
                className="w-full border p-2 mb-4"
              />
              <input
                type="number"
                name="stock"
                placeholder="Stock"
                value={formData.stock}
                onChange={handleInputChange}
                className="w-full border p-2 mb-4"
              />
              <input
                type="text"
                name="deliveryTime"
                placeholder="Delivery Time"
                value={formData.deliveryTime}
                onChange={handleInputChange}
                className="w-full border p-2 mb-4"
              />
              <button
                type="submit"
                className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
              >
                Save Changes
              </button>
              <button
                type="button"
                onClick={() => setShowModal(false)}
                className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 ml-4"
              >
                Cancel
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ManageProducts;





AdminDashboard======++++++====++++
import React, { useState, useEffect } from "react";
import { FaUsers, FaChartLine, FaCogs } from "react-icons/fa";
import { Line } from "react-chartjs-2"; // Make sure this is imported correctly
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js'; // Registering necessary parts

import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

// Registering necessary chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

// Sample Data for the Dashboard
const dashboardData = {
  totalUsers: 1200,
  activeUsers: 950,
  totalSales: 500000,
  salesGrowth: [100, 200, 300, 250, 400, 500, 450, 600],
};

const Dashboard = () => {
  // States for managing dynamic data (e.g., from API)
  const [userStats, setUserStats] = useState(dashboardData);

  // Chart Data (for Sales Growth over time)
  const chartData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug"],
    datasets: [
      {
        label: "Sales Growth",
        data: userStats.salesGrowth,
        borderColor: "rgb(75, 192, 192)",
        backgroundColor: "rgba(75, 192, 192, 0.2)",
        tension: 0.1,
      },
    ],
  };

  // Chart options to control size and maintain aspect ratio
  const chartOptions = {
    maintainAspectRatio: false, // Allows you to control the height and width of the chart
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
    },
    scales: {
      x: {
        beginAtZero: true,
      },
      y: {
        beginAtZero: true,
      },
    },
  };

  return (
    <div className="flex flex-col p-6 space-y-8">
      {/* Dashboard Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-semibold text-gray-900">Admin Dashboard</h1>
        <button className="bg-blue-500 text-white py-2 px-4 rounded-lg shadow-md hover:bg-blue-600 transition duration-300">
          New Notification
        </button>
      </div>

      {/* Dashboard Overview Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
          <h3 className="text-xl font-semibold text-gray-700">Total Users</h3>
          <p className="text-3xl font-bold text-gray-900 mt-2">{userStats.totalUsers}</p>
          <div className="mt-4">
            <FaUsers className="text-gray-500 text-3xl" />
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
          <h3 className="text-xl font-semibold text-gray-700">Active Users</h3>
          <p className="text-3xl font-bold text-gray-900 mt-2">{userStats.activeUsers}</p>
          <div className="mt-4">
            <FaUsers className="text-green-500 text-3xl" />
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
          <h3 className="text-xl font-semibold text-gray-700">Total Sales</h3>
          <p className="text-3xl font-bold text-gray-900 mt-2">${userStats.totalSales.toLocaleString()}</p>
          <div className="mt-4">
            <FaChartLine className="text-blue-500 text-3xl" />
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
          <h3 className="text-xl font-semibold text-gray-700">Settings</h3>
          <div className="mt-4">
            <FaCogs className="text-gray-500 text-3xl" />
          </div>
        </div>
      </div>

      {/* Sales Growth Chart */}
      <div className="bg-white p-6 rounded-lg shadow-lg" style={{ width: '100%', height: '500px' }}>
        <h3 className="text-xl font-semibold text-gray-700">Sales Growth Over Time</h3>
        <div className="mt-4" style={{ height: '500px' }}>
          {/* Set chart height directly here */}
          <Line data={chartData} options={chartOptions} height={500} />
        </div>
      </div>

      {/* Recent Activity (Placeholder) */}
      <div className="bg-white p-6 rounded-lg shadow-lg">
        <h3 className="text-xl font-semibold text-gray-700">Recent Activity</h3>
        <div className="mt-4">
          <ul>
            <li className="py-2 border-b">User "Test 2" signed in</li>
            <li className="py-2 border-b">Product "Handmade Vase" added</li>
            <li className="py-2 border-b">Order #12345 completed</li>
            <li className="py-2 border-b">New message from customer</li>
          </ul>
        </div>
      </div>

      <ToastContainer />
    </div>
  );
};

export default Dashboard;


Updated AdminDashboard===++++===++++----
import React, { useState, useEffect } from "react";
import { FaUsers, FaChartLine } from "react-icons/fa";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import axios from "axios";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Dashboard = () => {
  const [stats, setStats] = useState({});
  const [userRole, setUserRole] = useState("");

  useEffect(() => {
    const fetchUserRoleAndStats = async () => {
      try {
        const roleResponse = await axios.get("/api/users/getUserRole", {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });

        const role = roleResponse.data.data.toLowerCase();
        setUserRole(role);

        if (role === "admin") {
          const statsResponse = await axios.get("/api/users/getUserStats", {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });

          const { totalUsers, activeUsers } = statsResponse.data.data;
          setStats({
            totalUsers,
            activeUsers,
            totalSales: 500000,
            salesGrowth: [100, 200, 300, 250, 400, 500, 450, 600],
          });
        } else if (role === "seller") {
          setStats({
            totalProducts: 300,
            highRatedProducts: 50,
            lowRatedProducts: 10,
            totalSales: 500000,
            salesGrowth: [100, 200, 300, 250, 400, 500, 450, 600],
          });
        }
      } catch (error) {
        console.error("Error fetching role or stats:", error);
      }
    };

    fetchUserRoleAndStats();
  }, []);

  const chartData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug"],
    datasets: [
      {
        label: "Sales Growth",
        data: stats.salesGrowth || [],
        borderColor: "rgb(75, 192, 192)",
        backgroundColor: "rgba(75, 192, 192, 0.2)",
        tension: 0.1,
      },
    ],
  };

  const chartOptions = {
    maintainAspectRatio: true,
    responsive: true,
    plugins: {
      legend: { position: "top" },
    },
    scales: {
      x: { beginAtZero: true },
      y: { beginAtZero: true },
    },
  };

  return (
    <div className="flex flex-col p-6 space-y-8">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-semibold text-gray-900">
          {userRole === "admin" ? "Admin Dashboard" : "Seller Dashboard"}
        </h1>
        <button className="bg-blue-500 text-white py-2 px-4 rounded-lg shadow-md hover:bg-blue-600 transition duration-300">
          New Notification
        </button>
      </div>

      {/* Stats Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {userRole === "admin" ? (
          <>
            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Total Users
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.totalUsers}
              </p>
              <FaUsers className="text-gray-500 text-3xl mt-4" />
            </div>

            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Active Users
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.activeUsers}
              </p>
              <FaUsers className="text-green-500 text-3xl mt-4" />
            </div>
          </>
        ) : (
          <>
            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Total Products
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.totalProducts}
              </p>
              <FaUsers className="text-gray-500 text-3xl mt-4" />
            </div>

            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                High Rated Products
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.highRatedProducts}
              </p>
              <FaUsers className="text-green-500 text-3xl mt-4" />
            </div>

            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Low Rated Products
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.lowRatedProducts}
              </p>
              <FaUsers className="text-red-500 text-3xl mt-4" />
            </div>
          </>
        )}

        <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
          <h3 className="text-xl font-semibold text-gray-700">Total Sales</h3>
          <p className="text-3xl font-bold text-gray-900 mt-2">
            ${stats.totalSales?.toLocaleString()}
          </p>
          <FaChartLine className="text-blue-500 text-3xl mt-4" />
        </div>
      </div>

      {/* Chart Section */}
      <div className="bg-white p-6 rounded-lg shadow-lg w-full">
        <h3 className="text-xl font-semibold text-gray-700 mb-4">
          Sales Growth Over Time
        </h3>
        <div className="w-7/10" style={{ height: "400px" }}>
          <Line
            data={chartData}
            options={chartOptions}
            width={window.innerWidth * 0.7}
            height={400}
          />
        </div>
      </div>
    </div>
  );
};

export default Dashboard;



Admin
Adminashroasbflfaj==---
import React, { useState, useEffect } from "react";
import { FaUsers, FaChartLine } from "react-icons/fa";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import axios from "axios";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Dashboard = () => {
  const [stats, setStats] = useState({});
  const [userRole, setUserRole] = useState("");
  const [totalSales, setTotalSales] = useState(null);

  // Fetch user role and other stats
  useEffect(() => {
    const fetchUserRoleAndStats = async () => {
      try {
        const roleResponse = await axios.get("/api/users/getUserRole", {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
  
        const role = roleResponse.data.data.toLowerCase();
        setUserRole(role);
  
        if (role === "admin") {
          // Fetch additional stats for admin (users and active users)
          const statsResponse = await axios.get("/api/users/getUserStats", {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });
  
          const { totalUsers, activeUsers } = statsResponse.data.data;
          setStats({
            totalUsers,
            activeUsers,
            salesGrowth: [100, 200, 300, 250, 400, 500, 450, 600],
          });
  
          // Fetch total sales for admin
          const totalSalesResponse = await axios.get("/api/orders/allTotalSales", {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });
  
          setTotalSales(totalSalesResponse.data.totalSales);
        } else if (role === "seller") {
          // Fetch total products for seller
          const totalProductsResponse = await axios.get(
            "/api/products/myTotalProducts",
            {
              headers: {
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
            }
          );
  
          // Fetch rated product stats
          const ratedProductStatsResponse = await axios.get(
            "/api/products/getRatedProductStats",
            {
              headers: {
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
            }
          );

          console.log("This is response", ratedProductStatsResponse.data);
          
          setStats((prevStats) => ({
            ...prevStats,
            totalProducts: totalProductsResponse.data.data.totalProducts,
            highRatedProducts: ratedProductStatsResponse.data.totalHighRatedProducts,
            lowRatedProducts: ratedProductStatsResponse.data.totalLowRatedProducts,
            salesGrowth: [100, 200, 300, 250, 400, 500, 450, 600],
          }));
        }
      } catch (error) {
        console.error("Error fetching role or stats:", error);
      }
    };
  
    fetchUserRoleAndStats();
  }, []);
  

  const chartData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug"],
    datasets: [
      {
        label: "Sales Growth",
        data: stats.salesGrowth || [],
        borderColor: "rgb(75, 192, 192)",
        backgroundColor: "rgba(75, 192, 192, 0.2)",
        tension: 0.1,
      },
    ],
  };

  const chartOptions = {
    maintainAspectRatio: true,
    responsive: true,
    plugins: {
      legend: { position: "top" },
    },
    scales: {
      x: { beginAtZero: true },
      y: { beginAtZero: true },
    },
  };

  return (
    <div className="flex flex-col p-6 space-y-8">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-semibold text-gray-900">
          {userRole === "admin" ? "Admin Dashboard" : "Seller Dashboard"}
        </h1>
        <button className="bg-blue-500 text-white py-2 px-4 rounded-lg shadow-md hover:bg-blue-600 transition duration-300">
          New Notification
        </button>
      </div>

      {/* Stats Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {userRole === "admin" ? (
          <>
            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Total Users
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.totalUsers}
              </p>
              <FaUsers className="text-gray-500 text-3xl mt-4" />
            </div>

            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Active Users
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.activeUsers}
              </p>
              <FaUsers className="text-green-500 text-3xl mt-4" />
            </div>

            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Total Sales
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {totalSales !== null
                  ? `Rs ${totalSales.toLocaleString()}`
                  : "Loading..."}
              </p>
              <FaChartLine className="text-blue-500 text-3xl mt-4" />
            </div>
          </>
        ) : (
          <>
            {userRole === "seller" && (
              <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
                <h3 className="text-xl font-semibold text-gray-700">
                  Total Products
                </h3>
                <p className="text-3xl font-bold text-gray-900 mt-2">
                  {stats.totalProducts !== undefined
                    ? stats.totalProducts
                    : "Loading..."}
                </p>
                <FaUsers className="text-gray-500 text-3xl mt-4" />
              </div>
            )}

            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                High Rated Products
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.highRatedProducts}
              </p>
              <FaUsers className="text-green-500 text-3xl mt-4" />
            </div>

            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Low Rated Products
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                {stats.lowRatedProducts}
              </p>
              <FaUsers className="text-red-500 text-3xl mt-4" />
            </div>

            <div className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition duration-300">
              <h3 className="text-xl font-semibold text-gray-700">
                Total Sales
              </h3>
              <p className="text-3xl font-bold text-gray-900 mt-2">
                Total Sales Not Available
              </p>
              <FaChartLine className="text-gray-500 text-3xl mt-4" />
            </div>
          </>
        )}
      </div>

      {/* Chart Section */}
      <div className="bg-white p-6 rounded-lg shadow-lg w-full">
        <h3 className="text-xl font-semibold text-gray-700 mb-4">
          Sales Growth Over Time
        </h3>
        <div className="w-7/10" style={{ height: "400px" }}>
          <Line
            data={chartData}
            options={chartOptions}
            width={window.innerWidth * 0.7}
            height={400}
          />
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
